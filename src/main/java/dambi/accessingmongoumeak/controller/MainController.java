package dambi.accessingmongoumeak.controller;

import java.util.Date;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import dambi.accessingmongoumeak.model.Bestseller;
import dambi.accessingmongoumeak.model.BestsellerRepository;


@RestController // This means that this class is a Controller baina @Controller bakarrik jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/Bideojokoak") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called umeaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private BestsellerRepository bestsellerRepository;

	
	@GetMapping(path = "/BestSeller")
	public @ResponseBody Iterable<Bestseller> getAllBestSeller() {
		// This returns a JSON or XML with the users
		return bestsellerRepository.findAll();
	}

    @GetMapping("/BestSellerId/{id}")
    public @ResponseBody Bestseller getBestSellerId(@PathVariable int id){
        return bestsellerRepository.findById(id);
    }

    @GetMapping("/BestSellerRango/{rango}")
    public @ResponseBody Bestseller getBestSellerRango(@PathVariable int rango){ 
         return bestsellerRepository.findByRango(rango);
    }

    @GetMapping("BestSellerPubli/{publi}")
    public @ResponseBody Iterable<Bestseller> getBestSellerPublicador(@PathVariable String publi){
        return bestsellerRepository.findByPublicador(publi);
    }

    @PutMapping("updateRangoBestSeller")
    public @ResponseBody Bestseller updateRango(@Valid int id, int rango, int ventas){
        try{
            Bestseller bestseller = new Bestseller();
            bestseller = bestsellerRepository.findById(id);
            bestseller.setRango(rango);
            bestseller.setVentas(ventas);
            
            bestsellerRepository.updateRango(bestseller);
            return bestseller;

        }catch (Exception ex){
            return null;
        }
    }

	@PostMapping(path = "/addBestSeller") // Map ONLY POST Requests
	public @ResponseBody String addBestSeller(@RequestParam int id, @RequestParam int rango, @RequestParam String titulo, @RequestParam int ventas, 
											@RequestParam String series, @RequestParam String plataforma, @RequestParam Date fecha_de_salida,
											@RequestParam String desarrollador, @RequestParam String publicador) {

		Bestseller b = new Bestseller();
        b.setId(id);
        b.setRango(rango);
        b.setTitulo(titulo);
        b.setVentas(ventas);
        b.setSeries(series);
        b.setPlataforma(plataforma);
        b.setFecha_de_salida(fecha_de_salida);
        b.setDesarrollador(desarrollador);
        b.setPublicador(publicador);
		
        bestsellerRepository.save(b);

        return "Saved";
	}

	@DeleteMapping(path = "/deleteBestSeller/Id{id}")
    public @ResponseBody long deleteBestSeller(@PathVariable int id){
        
        try{
            long zein = bestsellerRepository.delete(id);
            return zein;
        }catch (Exception ex){
            System.out.println("Errorea egon da "+ id +" bestsellera ezbatzerakoan" );
        }
        
        return id;
    }
	
}